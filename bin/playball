#!/usr/bin/env node

var sprintf = require('sprintf-js').sprintf;
var gameday = require('../lib/gameday');
var print = require('../lib/print');
var utils = require('../lib/utils');
var XML = require('pixl-xml');

gameday.games()
  .then(showGameList);

function showGameList(games) {
  if (games.length === 0) {
    print.error('No games today');
    process.exit();
  }

  function chooseGame(idx) {
    return games[idx];
  }

  games.forEach(function(game, idx) {
    console.log('[' + idx + '] ' + game.disp);
  });

  print.question('Which game?')
    .then(chooseGame)
    .then(startGame)
    .done();
}

function startGame(game) {
  var events = ['preview', 'preGame', 'warmup', 'delayed', 'delayedStart',
    'inProgress', 'replay', 'review', 'managerChallenge', 'gameOver',
    'final', 'completedEarly', 'suspended', 'postponed', 'forfeit',
    'cancelled',];

  function sayEvent(name) {
    return function() {
      console.log(name);
    };
  }

  events.forEach(function(e) {
    game.on(e, sayEvent(e));
  });

  game.on('startInning', startInning);
  game.on('endInning', endInning);
  game.on('startAtbat', startAtbat);
  game.on('endAtbat', endAtbat);
  game.on('pitch', showPitch);
  game.on('action', showAction);

  game.start();
}

function startInning(inning) {
  print.h3('%s of %s', inning.side, utils.ordinal(inning.num));
}

function endInning(inning) {
  var status = (inning.side.toLowerCase() === 'top' ? 'Middle' : 'End');
  print.h3('%s of %s', status, utils.ordinal(inning.num));
}

function startAtbat(batter) {
  var message = sprintf('Now batting for %(team_abbrev)s: ' +
    '%(boxname)s #%(num)s %(current_position)s', batter);
  if (batter.current) {
    var atbats = XML.alwaysArray(batter.current.ab)[0];
    var hits = batter.current.h;
    var avg = batter.current.avg;
    message += sprintf(' - %s-%s, %s AVG', hits, atbats, avg);
  }
  print.h2(message);
}

function endAtbat(atbat) {
  print.info(atbat.des);
}

function showPitch(pitch) {
  print.info(pitch.des);
}

function showAction(action) {
  print.info(action.des);
}

/*
function welcome(game) {
  if (state.teams.home.name) { return; }

  state.teams.home = {
    name: game.home_team_name,
    record: sprintf('%(home_win)d-%(home_loss)d', game),
  };
  state.teams.away = {
    name: game.away_team_name,
    record: sprintf('%(away_win)d-%(away_loss)d', game),
  };

  print.h1('%(away.name)s (%(away.record)s) @ %(home.name)s (%(home.record)s)', state.teams);
  print.h1(game.venue);
}

function waitingForGame() {
  print.info('Waiting for Game to Start');
}

function finalScore(game) {
  print.h1('Final Score: ' + state.getScore());
}

function delayed(game) {
  print.warn('Gamed Delayed - ' + game.reason);
  waitingForGame();
}

function inWarmup(game) {
  print.h2('In Warmup');
}

function gameUnderway(game) {
  print.h2('Game is Underway');
}

function inningStatus() {
  print.h3('%s of %s', state.inningSide, utils.ordinal(state.inningNum));
}

function addPitchEvent(atbat, pitch) {
  var message = sprintf('%s - %d MPH %s',
      pitch.des, Math.round(pitch.start_speed), pitches[pitch.pitch_type]);
  state.events[pitch.event_num] = {
    message: message,
    showCount: pitch.type !== 'X',
    atbat: atbat,
  };
}

function addPickoffEvent(atbat, event) {
  state.events[event.event_num] = {
    message: event.des,
    showCount: false,
    atbat: atbat,
  };
}

function addActionEvent(event) {
  state.events[event.event_num] = {
    message: event.des,
    showCount: false,
    atbat: null,
  };
}

function addAtBatEvent(atbat) {
  var eventNum = parseInt(atbat.$.event_num);
  state.events[eventNum] = {
    message: atbat.$.des,
    showCount: false,
    atbat: atbat.$.num,
  };

  atbat.pitch.forEach(function(pitch) {
    addPitchEvent(atbat.$.num, pitch.$);
  });
}

function inProgress(playData) {
  if (!playData) { return; }

  if (playData.inning_state && playData.inning_state !== state.inningSide) {
    showSideStart = playData.inning_state === 'Top' || playData.inning_state === 'Bottom';
    showSideEnd = playData.inning_state === 'Middle' || playData.inning_state === 'End';
    state.inningSide = playData.inning_state;
    state.inningNum = playData.inning;
  }

  if (playData.players && playData.players.batter) {
    state.batterChanged = playData.players.batter.pid !== state.batterId;
    if (state.batterChanged) {
      state.batterId = playData.players.batter.pid;
      utils.ensureArray(playData.players.batter, 'ab');
      state.batterDisplay = sprintf('%(boxname)s - %(h)d for %(ab[0])d, %(avg)f AVG',
          playData.players.batter);
      showBatter = true;
    }
  }

  if (playData.o && playData.o !== state.outs) {
    state.outs = playData.o;
    showOuts = true;
  }

  if (playData.atbat) {
    var atbat = playData.atbat;

    if (atbat.p) {
      utils.ensureArray(atbat, 'p');
      atbat.p.forEach(addPitchEvent.bind(null, atbat.num));
    }

    if (atbat.po) {
      utils.ensureArray(atbat, 'po');
      atbat.po.forEach(addPickoffEvent.bind(null, atbat.num));
    }

    var runners = [false, false, false];
    if (atbat.runner) {
      utils.ensureArray(atbat, 'runner');
      atbat.runner.forEach(function(runner) {
        var f = runner.end ? 'end' : 'start';
        if (runner[f] === '1B') {
          runners[0] = true;
        }

        if (runner[f] === '2B') {
          runners[1] = true;
        }

        if (runner[f] === '3B') {
          runners[2] = true;
        }
      });
    }

    state.runnerChanged = state.runners[0] !== runners[0] ||
                          state.runners[1] !== runners[1] ||
                          state.runners[2] !== runners[2];
    state.runners = runners;
  }

  if (playData.score) {
    var homeRuns = playData.score.hr;
    var awayRuns = playData.score.ar;
    var runsChanged = state.runs.home !== homeRuns ||
                      state.runs.away !== awayRuns;
    if (runsChanged) {
      state.runs = { home: homeRuns, away: awayRuns };
      showRuns = true;
    }
  }

  if (playData.action) {
    utils.ensureArray(playData, 'action');
    playData.action.forEach(addActionEvent);
  }

  if (state.batterChanged || state.runnerChanged || showRuns || showSideEnd) {
    state.inningDataPending = true;
    setTimeout(fetchInningData, 2000);
  }

  if (state.inningDataPending) {
    return;
  }

  if (showSideStart) {
    inningStatus();
    print.h2('%s Pitching - %s - %f ERA',
        state.pitchingTeam(),
        playData.players.pitcher.boxname,
        typeof playData.players.pitcher.era === 'number' ? playData.players.pitcher.era : 0);
    showSideStart = false;
  }

  if (showBatter) {
    print.h2('%s Batting - %s', state.battingTeam(), state.batterDisplay);
    showBatter = false;
  }

  var showCount = false;
  state.events.forEach(function(event, num) {
    if (num <= lastShownEvent) { return; }

    print.info(event.message);
    lastShownEvent = num;
    showCount = event.showCount;
  });

  if (showCount) {
    print.info('%(b)d-%(s)d', playData);
  }

}

function fetchInningData() {
  game.getInningData(state.inningNum, function(err, inningData) {
    if (err) { return; }

    var side = (state.inningSide === 'Top' || state.inningSide === 'Middle') ? 'top' : 'bottom';
    if (!inningData[side]) { return; }

    var lastAtBat = 0;
    if (inningData[side][0].atbat) {
      inningData[side][0].atbat.forEach(function(atbat) {
        addAtBatEvent(atbat);
        lastAtBat = atbat.$.num;
      });
    }

    if (inningData[side][0].action) {
      inningData[side][0].action.forEach(function(action) {
        addActionEvent(action.$);
      });
    }

    state.events.forEach(function(event, num) {
      if (num <= lastShownEvent) { return; }

      if (event.atbat && event.atbat > lastAtBat) { return; }

      print.info(event.message);
      lastShownEvent = num;
    });

    if (showRuns) {
      print.h1(state.getScore());
      showRuns = false;
    }

    if (showOuts && state.outs > 0) {
      print.h3('%d out', state.outs);
      showOuts = false;
    }

    if (showSideEnd) {
      inningStatus();
      showSideEnd = false;
    }

    state.inningDataPending = false;
  });
}

function showGameList(error, gameList) {
  if (error) {
    print.error('Error while fetching today\'s games');
    process.exit();
  }

  if (gameList.length === 0) {
    print.error('No games today');
    process.exit();
  }

  gameList.forEach(function(game, idx) {
    console.log(sprintf('[%d] %s', idx, game));
  });

  print.question('Which game?', startGame);
}

function registerGameListeners(game) {
  game.once('Preview', welcome);
  game.once('Pre-Game', welcome);
  game.once('Warmup', welcome);
  game.once('Delayed', welcome);
  game.once('Delayed Start', welcome);
  game.once('In Progress', welcome);
  game.once('Game Over', welcome);
  game.once('Final', welcome);

  game.once('Delayed', delayed);
  game.once('Delayed Start', delayed);

  'Preview', waitingForGame);
  'Pre-Game', waitingForGame);

  game.once('Warmup', inWarmup);
  game.once('In Progress', gameUnderway);

  game.once('Game Over', finalScore);
  game.once('Final', finalScore);

  'In Progress', inProgress);
}

function startGame(which) {
  game = gameday.getGame(which);
  registerGameListeners(game);
  game.start();
}
*/
