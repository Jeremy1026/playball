#!/usr/bin/env node

const _ = require('lodash');
const chalk = require('chalk');
const sprintf = require('sprintf-js').sprintf;
const gameday = require('../lib/gameday');
const pitches = require('../lib/pitches');
const print = require('../lib/print');
const utils = require('../lib/utils');

gameday.games()
  .then(showGameList);

function showGameList(games) {
  if (games.length === 0) {
    print.error('No games today');
    process.exit();
  }

  function chooseGame(idx) {
    return games[idx];
  }

  games.forEach((game, idx) => console.log('[' + idx + '] ' + game.disp));

  print.question('Which game?')
    .then(chooseGame)
    .then(startGame)
    .done();
}

function startGame(game) {
  game.once('preview', waitingForGame);
  game.once('preGame', waitingForGame);
  game.once('warmup', inWarmup);

  game.on('startInning', startInning);
  game.on('endInning', endInning);
  game.on('startAtbat', startAtbat);
  game.on('endAtbat', endAtbat);
  game.on('pitch', showPitch);
  game.on('action', showAction);
  game.on('scoreChange', showScore);

  game.once('delayed', showStatusAndReason);
  game.once('delayedStart', showStatusAndReason);

  game.on('final', showFinalScore);
  game.on('gameOver', showFinalScore);

  game.once('completedEarly', showStatusAndReason);
  game.once('suspended', showStatusAndReason);
  game.once('postponed', showStatusAndReason);
  game.once('forfeit', showStatusAndReason);
  game.once('cancelled', showStatusAndReason);

  game.start();
}

var count = {b: 0, s: 0, o: 0};

function waitingForGame() {
  print.info('Waiting for game to start');
}

function inWarmup(game) {
  print.info('In warmup');
}

function startInning(inning) {
  print.h3('%s of %s', inning.side, utils.ordinal(inning.num));
}

function endInning(inning) {
  count.o = 0;
  var status = (inning.side.toLowerCase() === 'top' ? 'Middle' : 'End');
  print.h3('%s of %s', status, utils.ordinal(inning.num));
}

function startAtbat(atbat) {
  var pitcher = sprintf('%(team.name)s pitching: %(boxname)s', atbat.pitcher);
  if (atbat.pitcher.num) {
    pitcher += ' #' + atbat.pitcher.num;
  }
  if (atbat.pitcher.current) {
    pitcher += sprintf(
      ' - %(era)s ERA, %(pitches)sP (%(strikes)sS, %(balls)sB)',
      atbat.pitcher.current);
  }

  var batter = sprintf('%(team.name)s batting: %(boxname)s', atbat.batter);
  if (atbat.batter.num) {
    batter += ' #' + atbat.batter.num;
  }
  if (atbat.batter.current_position) {
    batter += ' ' + atbat.batter.current_position;
  } else if (atbat.batter.current && atbat.batter.current.current_position) {
    batter += ' ' + atbat.batter.current.current_position;
  }
  if (atbat.batter.current) {
    var atbats = utils.asArray(atbat.batter.current.ab)[0];
    var hits = atbat.batter.current.h;
    var avg = atbat.batter.current.avg;
    batter += sprintf(' - %s-%s, %s AVG', hits, atbats, avg);
  }

  print.h2(pitcher);
  print.h2(batter);
}

function endAtbat(atbat) {
  print.info(atbat.des);
  showOuts(+atbat.o);
  resetCount();
}

function showPitch(pitch) {
  updateCount(pitch);
  var message = pitch.des;
  if (pitch.start_speed) {
    message += sprintf(' - %d MPH', Math.round(+pitch.start_speed));
  }
  if (pitch.pitch_type && pitches[pitch.pitch_type]) {
    message += ' ' + pitches[pitch.pitch_type];
  }
  if (pitch.type !== 'X') {
    message += sprintf(' - %(b)d-%(s)d', count);
  }
  print.info(message);
}

function showAction(action) {
  print.info(action.des);
  showOuts(+action.o);
}

function showScore(teams) {
  print.h1('%(away.name)s: %(away.runs)d - %(home.name)s: %(home.runs)d',
           teams);
}

function showOuts(value) {
  if (value !== count.o) {
    count.o = value;
    print.h3('%d out', count.o);
  }
}

function showStatusAndReason(game) {
  var message = game.status;
  if (game.reason) {
    message += ': ' + game.reason;
  }
  print.warn(message);
}

function showFinalScore(linescore) {
  var teamPad = 2;
  var teamSize = Math.max(linescore.away_team_name.length,
    linescore.home_team_name.length) + teamPad;
  var headerRow = _.padEnd('', teamSize);
  var awayRow = _.padEnd(linescore.away_team_name, teamSize);
  var homeRow = _.padEnd(linescore.home_team_name, teamSize);
  linescore.linescore.forEach((inning) => {
    headerRow += sprintf('%3s |', inning.inning);
    awayRow += sprintf('%3s |', inning.away_inning_runs);
    homeRow += sprintf('%3s |', inning.home_inning_runs);
  });
  headerRow += '  R |';
  awayRow += chalk.bold(sprintf('%3s', linescore.away_team_runs)) + ' |';
  homeRow += chalk.bold(sprintf('%3s', linescore.home_team_runs)) + ' |';
  headerRow += '  H |';
  awayRow += sprintf('%3s |', linescore.away_team_hits);
  homeRow += sprintf('%3s |', linescore.home_team_hits);
  headerRow += '  E';
  awayRow += sprintf('%3s', linescore.away_team_errors);
  homeRow += sprintf('%3s', linescore.home_team_errors);
  print.pre(headerRow);
  print.pre(_.pad('', headerRow.length, '-'));
  print.pre(awayRow);
  print.pre(homeRow);
  print.info('W: %(last_name)s (%(wins)s-%(losses)s)',
    linescore.winning_pitcher);
  print.info('L: %(last_name)s (%(wins)s-%(losses)s)',
    linescore.losing_pitcher);
  if (linescore.save_pitcher && linescore.save_pitcher.last_name) {
    print.info('SV: %(last_name)s (%(saves)s)',
      linescore.save_pitcher);
  }
}

function resetCount() {
  count.s = 0;
  count.b = 0;
}

function updateCount(pitch) {
  if (pitch.type === 'B') {
    count.b += 1;
  }

  var isFoul = pitch.des.startsWith('Foul') && pitch.des !== 'Foul Tip'

  if (pitch.type === 'S' && !(isFoul && count.s === 2)) {
    count.s += 1;
  }
}
